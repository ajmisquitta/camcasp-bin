#!/usr/bin/env python3
#  -*-  coding:  iso-8859-1  -*-

"""Run CamCASP tests.
"""

import argparse
from datetime import date
import os
import subprocess
from time import strftime

parser = argparse.ArgumentParser(
formatter_class=argparse.RawDescriptionHelpFormatter,
description="""Run CamCASP tests.
""",epilog="""
run_tests.py --test [test test ... ] [--clean] [--scfcode [scfcode ...]]
            [--difftool <code>]

The default is all tests with all scf codes (i.e. dalton, nwchem and
psi4, except for the He2 test, where only dalton is used)
.
If "--clean" is specified, files generated by the specified tests are
deleted. Otherwise, the specified tests are carried out using the 
specified scfcodes.

At present the tests are:
  He2           Helium dimer energy for basis types MC, MC+, DC and DC+
  H2O_dimer     Water dimer energy using specified scfcodes, or all of
                them if the --scfcode argument is omitted.
  CO2-isa       ISA multipole moments for CO2.
  formamide-isa ISA multipole moments for formamide.
  H2O_props     Water ISA polarizabilities and dispersion coefficients.

The --scfcode is ignored for the He2 tests, which use dalton.

This script assumes that the test directories exist and contain the
appropriate cluster files.

Some of the tests use a diff program to display differences between the
test results and a reference file. The default program is xxdiff, but a
different one can be specified using the --difftool flag.
""")

ok = True
camcasp = os.getenv("CAMCASP")
if not camcasp:
    print("""Environment variable CAMCASP must be set to the base CamCASP directory
If that hasn't been done you also need to run the $CAMCASP/bin/setup.py script""")
    ok = False
# cores = os.getenv("CORES")
# if not cores:
#   print """Environment variable CORES must be set to the number of processors
# available to CamCASP"""
#   ok = False
if not ok:
    exit(1)

os.chdir(os.path.join(camcasp,"tests"))
  
parser.add_argument("test", help="Tests to run (default is all tests)",
                    nargs="*", default=[])
#                   choices=["He2","H2O_dimer","CO2-isa","H2O_props",
#                            "formamide-isa", "H2O_dimer_psi4", "H2O_dimer_scan"]
parser.add_argument("--all", help="Run all available tests",
                     action="store_true")
parser.add_argument("--scfcode", help="SCFcode to use", nargs="*",
                    choices=["dalton","nwchem","psi4"])
parser.add_argument("--dirname", "-d", help="Name for test directories",
                    default="test")
# parser.add_argument("--report", help="Just show report of completed calculation",
#                     action="store_true")
parser.add_argument("--omit", help="Tests to omit", nargs="*", default=[])
parser.add_argument("--verbose", "-v", action="count",
                    help="Increase verbosity of output")
parser.add_argument("--debug", action="store_true",
                    help="Don't delete working files")
parser.add_argument("--clean", action="store_true",
                    help="Tidy up files produced by all tests and exit")
parser.add_argument("--difftool", default="xxdiff",
                    help="Difference tool for checking results")
                    
args = parser.parse_args()

all_tests = ["He2","H2O_dimer","CO2-isa","H2O_props", "formamide-isa",
             "H2O_dimer_psi4", "H2O_dimer_scan"]

if args.test:
    tests = args.test
    for test in tests[:]:
        if test not in all_tests:
            print("Test {} not recognized".format(test))
            tests.remove(test)
else:
    tests = all_tests
if args.omit:
    for test in args.omit:
        if test in tests:
            tests.remove(test)
  
if len(tests) == 0:
    print("No tests left to perform. Available tests are")
    print(", ".join(all_tests))

if args.scfcode:
    scfcodes = args.scfcode
else:
    scfcodes = ["psi4","nwchem","dalton",]

installed = {}
bindir = os.path.join(camcasp,"bin")
# Note: we need to take a copy scfcodes[:] because we're changing scfcodes
for scfcode in scfcodes[:]:
    if os.path.exists(os.path.join(bindir,f"no_{scfcode}")):
        installed[scfcode] = False
        if args.scfcode:
            print(f"{scfcode} is not installed")
        scfcodes.remove(scfcode)
    else:
        installed[scfcode] = True
if len(scfcodes) == 0:
    print("It appears that none of the requested SCF codes has been installed")
    print("Perhaps you need to run setup.py?")
    exit(1)


if args.clean:
    for test in tests:
        testcmnd = os.path.join(camcasp,"tests","test_{}.py".format(test))
        if test in ["H2O_dimer", "CO2-isa", "H2O_props", "formamide-isa", "H2O_dimer_scan"]:
            for scfcode in scfcodes:
                subprocess.call([testcmnd, "--clean", "--scfcode", scfcode])
        else:
            subprocess.call([testcmnd, "--clean"])
    exit(0)

if args.verbose:
    verbosity = args.verbose
else:
    verbosity = 0

# print tests
# print scfcodes

for test in tests:
    base = os.path.join(camcasp,"tests",test)
    testcmnd = os.path.join(camcasp,"tests",f"test_{test}.py")
    if test in ["H2O_dimer", "CO2-isa", "H2O_props", "H2O_dimer_psi4"]:
        for scfcode in scfcodes:
            if test == "H2O_dimer_psi4":
                if scfcode == "psi4":
                    print("""This test uses the sapt(dft) code in Psi4 itself,
which is currently not guaranteed to be correct.""")
                else:
                    continue
            print(f"Starting {test} test with SCF code {scfcode}")
            testdir = os.path.join(base,scfcode)
            report = os.path.join(testdir,"test_report")
            os.chdir(testdir)
            cmnd = [testcmnd, "--scfcode", scfcode,
              "-d", args.dirname, "--verbosity", str(verbosity)]
            if test in ["CO2-isa", "H2O_props"]:
                cmnd.extend(["--difftool", args.difftool])
            # if args.report:
            #     cmnd.append("--report")
            if args.debug:
                cmnd.append("--debug")
            # print cmnd
            with open(report,"w") as OUT:
                rc = subprocess.call(cmnd, stdout=OUT, stderr=subprocess.STDOUT)
            buffer = f"{test} test with SCF code {scfcode}:\n"
            endtime = strftime('%H:%M:%S')
            if rc == 4:
                buffer += f"failed at {endtime}"
            elif rc == 3:
                buffer += f"completed at {endtime}. Results differ from check output -- see report."
            elif rc == 2:
                buffer += f"completed at {endtime}."
            elif rc == 1:
                buffer += f"error exit at {endtime}."
            elif rc > 0:
                buffer += f"calculation failed with rc = {rc:1d} at {endtime}."
            else:
                buffer += f"completed successfully at {endtime}."
            print (buffer)
            print(f"See report at {report}")
            # if rc in [1,4,]:
            #     print(f"""See also {testdir}/{args.dirname}/OUT/*.log""")

    elif test == "formamide-isa":
        #  Submit jobs to a batch queue
        for scfcode in scfcodes:
            print(f"Submitting {test} test with SCF code {scfcode}")
            testdir = os.path.join(base,scfcode)
            report = os.path.join(testdir,"test_report")
            os.chdir(testdir)
            cmnd = [testcmnd, "--scfcode", scfcode,
              "-d", args.dirname, "--verbosity", str(verbosity)]
            if args.debug:
                cmnd.append("--debug")
            rc = subprocess.call(cmnd, stderr=subprocess.STDOUT)

    elif test == "H2O_dimer_scan":
        #  Use batch_camcasp.py to submit a series of jobs to a batch queue
        for scfcode in scfcodes:
            print(f"Submitting {test} test with SCF code {scfcode}")
            testdir = os.path.join(base,scfcode)
            os.chdir(testdir)
            cmnd = [testcmnd, "--scfcode", scfcode,
                    "--verbosity", str(verbosity)]
            subprocess.call(cmnd, stderr=subprocess.STDOUT)
        
            
    elif test == "He2":
        if "dalton" in scfcodes:
            pass
        else:
            print("The He2 test requires the Dalton SCF code.")
            exit(1)
        if not installed["dalton"]:
            print("The dalton program is not installed")
            exit(1)
        #  He2 test
        #  This is only run if the predefined SCF code, i.e. dalton
        #  has been specified
        print(f"Starting {test} test at {strftime('%H:%M:%S')}")
        report = os.path.join(base,"test_report")
        print(f"Report will be written to {report}")
        with open(report,"w") as OUT:
            cmnd = [testcmnd, "-d", args.dirname, "--verbosity", str(verbosity)]
            if args.debug:
                cmnd.append("--debug")
            rc = subprocess.call(cmnd, stdout=OUT, stderr=subprocess.STDOUT)
            endtime = strftime('%H:%M:%S')
            if rc == 4:
                print(f"failed at {endtime}.")
            elif rc == 2:
                print(f"{test} test failed at {endtime}.")
            elif rc == 3:
                print(f"{test} test completed at {endtime}. Some results were different from check results.")
            else:
                print(f"{test} test completed successfully at {endtime}.")
