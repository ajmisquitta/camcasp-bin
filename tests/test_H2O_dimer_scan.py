#!/usr/bin/python3
#  -*-  coding:  iso-8859-1  -*-

"""Test CamCASP using water dimer scan example.
"""

import argparse
from datetime import date
import re
from glob import glob
import os
from pathlib import Path
import subprocess
from shutil import rmtree 
from sys import stdout
from time import strftime

parser = argparse.ArgumentParser(
formatter_class=argparse.RawDescriptionHelpFormatter,
description="""Test CamCASP using water dimer scan (batch_camcasp.py) example.
""",epilog="""
Normally called by the run_tests.py script.
""")


parser.add_argument("--scfcode", default="psi4",
                    choices=["dalton","nwchem","psi4"],
                    help="Ab initio code to use (dalton, nwchem or psi4)")
# parser.add_argument("--done", help="List of completed CamCASP tasks",
#                     nargs="*", default=["none"],
#                     choices=["none","all","sapt-dft","delta-hf"])
parser.add_argument("--verbosity", help="Verbosity level", type=int,
                    default=0)
parser.add_argument("--debug", action="store_true",
                    help="Don't delete working files")
parser.add_argument("--clean", action="store_true",
                    help="Delete files created by previous tests and exit")
parser.add_argument("--dirname", "-d", help="Name for test directories",
                    default="test")
# parser.add_argument("--done", help="Tasks already completed", default=[],
#                     choices=["sapt-dft", "delta-hf"], nargs="*")

args = parser.parse_args()


ok = True
camcasp = os.getenv("CAMCASP")
if not camcasp:
    print("""Environment variable CAMCASP must be set to the base CamCASP directory
If that hasn't been done you probably also need to run the setup.py script""")
    ok = False
if not ok:
    exit(1)

scfcode = args.scfcode.lower()
testdir = os.path.join(camcasp,"tests","H2O_dimer_scan")
base = os.path.join(testdir,scfcode)
# print(base)
stdout.flush()

#  Clean up old test files and directories
if args.clean:
    os.chdir(base)
    files = glob("*")
    for file in files:
        if file in ["README", "template.clt", "geometry.data", "check_results",
                    "test_report"]:
            pass
        elif Path(file).is_dir():
            rmtree(file)
        else:
            os.remove(file)
    if os.path.exists("test_report"):
        os.rename("test_report","previous_test_report")
    exit(0)

os.chdir(base)
arguments = ["H2O2_scan", "template.clt", "geometry.data", "--scfcode", args.scfcode,
             "-M", "1", "--queue", "batch"]
if args.verbosity > 0:
    arguments.append("--verbose")

rc = subprocess.call(["batch_camcasp.py"] + arguments)
                      
arguments.append("--dHF")
rc = subprocess.call(["batch_camcasp.py"] + arguments)

print(f"""

All specified jobs have been submitted. When all have completed,
execute
  extract_saptdft.py {base}/*
for a summary of the results.

To compare with previous test results, use
  {os.path.join(testdir,"review_results.py")} --scfcode {args.scfcode} [--difftool <difftool>]
where <difftool> is a difference display program such as xxdiff (default), meld or vimdiff.

""")



print(f"""Use the command
  run_tests.py H2O_dimer_scan [--scfcode {args.scfcode}] --clean
to remove all files generated by the test. If no scfcode is specified,
the test files for all scfcodes are cleaned up.""")

      
